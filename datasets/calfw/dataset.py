import numpy as np
import os
import pandas as pd

def generate_file_with_all_img_names_ids(path, output_file):
    '''
    Generate a file that contains all the image names and an unique id for each identity.
    
        Parameters: 
            path (string): path to the folder that contains all the images
            output_file(string): name of the generated output file

    '''
    img_names = os.listdir(path)
    identities_names = [" ".join(img_name.split("_")[:-1]) for img_name in img_names]

    cnt = 0
    map_id = {}
    ids = np.zeros(len(img_names), dtype=np.int32)
    for i, id_name in enumerate(identities_names):
        if id_name not in map_id:
            map_id[id_name] = cnt
            cnt += 1
        
        ids[i] = map_id[id_name]

    with open(output_file, "w") as f:
        for i in range(len(img_names)):
            f.write(img_names[i] + " " + str(ids[i]))
            f.write('\n')

    print("{} generated".format(output_file))

def generate_probe_gallery_set(path, output_gallery="gallery_set.txt", output_probe="probe_set.txt"):
    '''
    Generate the probe set and the gallery set and write  
    the probe and gallery set in two files respectively.
    
        Parameters: 
            path (string): path to the file that contains all the image names (file generated by the previous method)
            output_gallery (string): name of the output gallery set file
            output_probe (string): name of the output probe set file

    '''
    df_names_ids = pd.read_csv(path, sep=" ", header=None, names=["img_name", "img_id"])
    map_id_names = df_names_ids.groupby("img_id").apply(lambda x: x["img_name"].values).to_dict()
    probe_set = []
    gallery_set = []
    ids = []
    for id, names_list in map_id_names.items():
        if len(names_list) == 1:
            print(id)
            continue
        img_names_choice = np.random.choice(names_list, 2, replace=False)
        gallery_set.append(img_names_choice[0])
        probe_set.append(img_names_choice[1])
        ids.append(id)
    with open(output_gallery, "w") as f:
        for i in range(len(ids)):
            f.write("{0} {1}".format(gallery_set[i], ids[i]))
            f.write("\n")

    with open(output_probe, "w") as f:
        for i in range(len(ids)):
            f.write("{0} {1}".format(probe_set[i], ids[i]))
            f.write("\n")


